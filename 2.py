# Большинство специализированных редакторов позволяют запускать скрипт прямо из окна редактирования.
# Если всё было сделано правильно, мы должны увидеть серое окно с заголовком Panda.
# Пока мы ничего не можем в нём сделать, однако это недолго изменить.
#
# Теперь загрузим небольшую демонстрационную сцену, для этого изменим код следующим образом:

from direct.showbase.ShowBase import ShowBase


class MyApp(ShowBase):

    def __init__(self):
        ShowBase.__init__(self)

        # Загрузка модели.
        self.scene = self.loader.loadModel("models/environment")
        # Прицепляем модель к узлу рендера.
        self.scene.reparentTo(self.render)
        # Устанавливаем масштаб и позицию для модели.
        self.scene.setScale(0.25, 0.25, 0.25)
        self.scene.setPos(-8, 42, 0)


app = MyApp()
app.run()

# Команда loader.loadModel() загружает указанный файл. Расширение файла указывать не обязательно.
# Поиск файла модели будет производиться сначала по указанному пути, а если ничего не найдено, то в model path,
# прописанном в конфигурационном файле (как в данном случае). Возвращаемое значение 'NodePath', указатель на модель.
# Обратите внимание, в имени файла используются прямые слеши даже под Windows.
#
# Panda3D содержит структуру данных, называемую scene graph. Scene graph это дерево, содержащее все модели,
# которые необходимо выводить на экран. Корень этого дерева - объект, называемый render. Объекты не помещённые
# в граф сцены не будут выведены на экран.
#
# Для перемещения нашей модели в граф сцены мы используем метод reparentTo. Этим методом мы устанавливаем родителя
# нашего объекта, тем самым помещая его в граф сцены, что делает его видимым.